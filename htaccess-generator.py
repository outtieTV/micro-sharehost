import re
import os

def clean_domain(domain_input: str) -> str:
    """
    Cleans the domain input to extract the base domain (e.g., example.com).
    Strips protocols (http/https), 'www.', and any trailing slashes or subdomains.
    
    Args:
        domain_input: The raw string provided by the user (e.g., 'https://i.example.com/').
    
    Returns:
        The cleaned base domain (e.g., 'example.com').
    """
    # 1. Strip protocol (http://, https://)
    domain = re.sub(r'https?://', '', domain_input, flags=re.IGNORECASE)
    
    # 2. Strip 'www.' if present
    domain = re.sub(r'^www\.', '', domain, flags=re.IGNORECASE)
    
    # 3. Strip trailing slashes
    domain = domain.rstrip('/')
    
    # 4. Strip any subdomain to get the base domain
    # This finds the last two parts separated by a dot (assuming .com, .net, etc.)
    parts = domain.split('.')
    if len(parts) >= 2:
        return '.'.join(parts[-2:])
    
    return domain

def clean_subfolder_prefix(prefix_input: str) -> str:
    """
    Cleans the subfolder input to extract a simple, single folder name (e.g., 'i').
    Strips protocols, domain names, slashes, and quotes.
    
    Args:
        prefix_input: The raw string provided by the user (e.g., 'i.example.com', '"u"', 'upload/').
        
    Returns:
        The cleaned single subfolder name (e.g., 'i').
    """
    # 1. Strip leading/trailing quotes and spaces
    prefix = prefix_input.strip(' "')
    
    # 2. Strip protocol if present
    prefix = re.sub(r'https?://', '', prefix, flags=re.IGNORECASE)
    
    # 3. Take only the first component before a dot or slash
    # If user inputs 'i.example.com', we want 'i'
    # If user inputs 'i/folder', we want 'i'
    # FIX: Use 'maxsplit=1' keyword argument to resolve DeprecationWarning
    prefix = re.split(r'[./]', prefix, maxsplit=1)[0]
    
    # 4. Ensure it's not empty and is safe for use in paths
    prefix = re.sub(r'[^a-zA-Z0-9_-]', '', prefix)
    
    if not prefix:
        raise ValueError("Invalid folder prefix. Must contain letters, numbers, hyphens, or underscores.")
        
    return prefix


def generate_htaccess():
    """
    Prompts the user for configuration details and generates the .htaccess file.
    """
    print("--- .htaccess File Generator for Subdomain Uploads ---")
    
    # --- 1. Get Domain Name ---
    while True:
        domain_input = input("Enter your MAIN domain name (e.g., example.com or https://www.example.com): ")
        try:
            domain = clean_domain(domain_input)
            if not domain:
                print("Error: Could not parse a valid domain. Please try again.")
                continue
            break
        except Exception as e:
            print(f"An error occurred: {e}. Please try again.")
            
    # --- 2. Get Upload Folder Prefix ---
    while True:
        prefix_input = input("Enter the desired upload folder/subdomain prefix (e.g., 'i', 'u', 'files'): ")
        try:
            subfolder = clean_subfolder_prefix(prefix_input)
            break
        except ValueError as e:
            print(f"Error: {e}")
        except Exception as e:
            print(f"An error occurred: {e}. Please try again.")

    print(f"\n--- Configuration Summary ---")
    print(f"Base Domain: {domain}")
    print(f"Subdomain/Folder Prefix: {subfolder}")
    print(f"Subdomain URL: {subfolder}.{domain}")
    print(f"Local Folder Path: ./{subfolder}/")
    print("-----------------------------\n")

    # FIX: Using 'rf"""' (Raw f-string) prevents the 'invalid escape sequence' SyntaxWarning 
    # when embedding regex escape sequences (like \.) generated by re.escape()
    htaccess_content = rf"""# Enable the Rewrite Engine
RewriteEngine On

# -----------------------------------------------------------
# RULE 1: Redirect {domain}/{subfolder}/ to {subfolder}.{domain}/
#
# This rule forces all traffic intended for the main domain's /{subfolder}/ path
# to use the dedicated subdomain ({subfolder}.{domain}).
# -----------------------------------------------------------

# Condition 1: Check if the host is the main domain (with or without www)
# [NC] means case-insensitive
RewriteCond %{{HTTP_HOST}} ^(www\.)?{re.escape(domain)}$ [NC]

# Rule: If the URL starts with '{subfolder}/'
# Redirect to https://{subfolder}.{domain}/$1 (301 Permanent Redirect)
RewriteRule ^{subfolder}/(.*)$ https://{subfolder}.{domain}/$1 [L,R=301]

# -----------------------------------------------------------
# RULE 2: Standard internal rewrite for the subdomain
#
# This rule internally maps requests for files on the subdomain 
# ({subfolder}.{domain}/filename.ext) to the physical folder (./{subfolder}/filename.ext).
# -----------------------------------------------------------

# Check if the host is the subdomain
RewriteCond %{{HTTP_HOST}} ^{re.escape(subfolder)}\.{re.escape(domain)}$ [NC]
# Check if the requested file/directory does NOT exist physically
RewriteCond %{{REQUEST_FILENAME}} !-f
RewriteCond %{{REQUEST_FILENAME}} !-d
# Internally rewrite the request to the '{subfolder}/' folder
RewriteRule ^(.*)$ {subfolder}/$1 [L]
"""

    filename = ".htaccess"
    try:
        with open(filename, "w") as f:
            f.write(htaccess_content)
        
        print(f"✅ Success! File '{filename}' created in the current directory.")
        print("Please ensure your web server and DNS are configured for the subdomain.")
        
    except IOError as e:
        print(f"❌ Error: Could not write file '{filename}'. Check permissions.")
        print(f"Details: {e}")

if __name__ == "__main__":
    generate_htaccess()
